{"version":3,"sources":["order-components/Pagination.tsx","order-components/Filters.tsx","order-components/DisplayTables.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Pagination","props","useState","page","setPage","count","setCount","handleChangePage","_","throttle","event","currentPage","leading","useEffect","TablePagination","rowsPerPageOptions","colSpan","rowsPerPage","onChangePage","useStyles","makeStyles","root","width","overflowX","table","minWidth","formControl","margin","Filters","classes","pincodeFilter","setPincodeFilter","dateFilter","setDateFilter","pincodeEmitter","debounce","handleDateChange","date","newDate","getDate","getMonth","getFullYear","dateEmitter","FormControl","className","InputLabel","htmlFor","Input","id","name","value","onChange","target","onKeyUp","utils","DateFnsUtils","Grid","container","justify","disableToolbar","variant","format","label","defaultValue","KeyboardButtonProps","DisplayTable","orders","setOrders","displayedOrders","setDisplayedOrders","offset","setOffset","limit","size","setSize","console","log","getAndSet","axios","get","then","result","data","Paper","Table","aria-label","TableHead","TableRow","e","newOffset","TableCell","length","filteredOrders","filter","order","orderDate","includes","pincode","deliveryPincode","TableBody","map","items","split","key","orderId","component","scope","customerId","align","dun","i","join","TableFooter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f26e67f5.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { TablePagination } from '@material-ui/core';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport _ from 'lodash';\r\n\r\n\r\ninterface PaginationProps {\r\n    count: number,\r\n    offset: number,\r\n    currentPage: (page: number) => void,\r\n}\r\n\r\n\r\n\r\nconst Pagination: React.FC<PaginationProps> = (props: any) => {\r\n\r\n    const [page, setPage] = useState<number>(0);\r\n    const [count, setCount] = useState<number>(props.count);\r\n\r\n    const handleChangePage = _.throttle((event: React.MouseEvent<HTMLButtonElement> | null, page: number) => {\r\n        props.currentPage(page)\r\n        setPage(page)\r\n    }, 500, { leading: false });\r\n\r\n\r\n    useEffect(() => {\r\n        setCount(props.count)\r\n    }, [props.count, page])\r\n\r\n    return (\r\n        <Fragment>\r\n            <TablePagination\r\n                rowsPerPageOptions={[]}\r\n                colSpan={5}\r\n                count={count}\r\n                rowsPerPage={20}\r\n                page={page}\r\n                onChangePage={handleChangePage} />\r\n        </Fragment>\r\n    )\r\n};\r\nexport default Pagination;","import React, { Fragment } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useState } from 'react';\r\nimport { FormControl, InputLabel, Input, Grid } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport _ from 'lodash';\r\n\r\ninterface FilterProps {\r\n    dateEmitter: (date: string) => void,\r\n    pincodeEmitter: (pincode: string) => void,\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        overflowX: 'auto',\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    formControl: {\r\n        margin: '10px',\r\n    },\r\n}\r\n);\r\nconst Filters: React.FC<any> = (props: FilterProps) => {\r\n\r\n    const classes = useStyles();\r\n    const [pincodeFilter, setPincodeFilter] = useState<any>(0);\r\n    const [dateFilter, setDateFilter] = useState<string>('');\r\n\r\n    const handlePincodeFilterChange = (event: any) => setPincodeFilter(event.target.value)\r\n\r\n    const pincodeEmitter = _.debounce(() => {\r\n        props.pincodeEmitter(pincodeFilter)\r\n    }, 1000)\r\n\r\n    const handleDateChange = _.debounce((date: any) => {\r\n        const newDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\r\n        setDateFilter(newDate)\r\n        props.dateEmitter(newDate)\r\n    }, 1000, { leading: true })\r\n\r\n    return (\r\n        <Fragment>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"pincodeFilter\">Pin Code Filter</InputLabel>\r\n                <Input id=\"pincodeFilter\" name=\"pincodeFilter\" value={pincodeFilter} onChange={handlePincodeFilterChange} onKeyUp={pincodeEmitter} />\r\n            </FormControl>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <Grid container justify=\"space-around\">\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"mm/dd/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Date picker inline\"\r\n                        defaultValue=\"11/04/2019\"\r\n                        value={dateFilter}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </MuiPickersUtilsProvider>\r\n        </Fragment>\r\n    )\r\n};\r\nexport default Filters;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Pagination from './Pagination';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Filters from './Filters';\r\nimport axios from 'axios';\r\nimport { Paper, Table, TableHead, TableRow, TablePagination, TableCell, FormControl, InputLabel, Input, Grid, TableBody, TableFooter } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        overflowX: 'auto',\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    formControl: {\r\n        margin: '10px',\r\n    },\r\n}\r\n);\r\n\r\nconst DisplayTable: React.FC<any> = (props: any) => {\r\n    const [orders, setOrders] = useState<any[]>([]);\r\n    const [displayedOrders, setDisplayedOrders] = useState<any[]>([]);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const [limit] = useState(props.limit)\r\n    const [size, setSize] = useState(0)\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setOffset(0)\r\n        console.log(props);\r\n        getAndSet(offset)\r\n    }, [props.limit])\r\n\r\n    const getAndSet = (offset: number) => {\r\n        axios.get(`http://localhost:3010/orders/get-orders?offset=${offset}&limit=${limit}`).then(result => {\r\n            setOrders(result.data.orders);\r\n            setDisplayedOrders(result.data.orders);\r\n            setSize(result.data.size)\r\n        })\r\n    }\r\n\r\n    const setCurrentOffset = (e: any) => {\r\n        const newOffset = limit + offset;\r\n        setOffset(newOffset);\r\n        getAndSet(newOffset)\r\n    }\r\n\r\n    const dateFilterEmitter = (date: string) => {\r\n        setOrders(orders)\r\n        if (orders.length > 0) {\r\n            const filteredOrders: any[] = orders.filter((order: any) => order.orderDate.includes(date));\r\n            setDisplayedOrders(filteredOrders)\r\n        }\r\n    }\r\n\r\n    const pincodeFilterEmitter = (pincode: string) => {\r\n        setOrders(orders)\r\n        if (orders.length > 0) {\r\n            const filteredOrders: any[] = orders.filter((order: any) => order.deliveryPincode.includes(pincode));\r\n            setDisplayedOrders(filteredOrders)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Paper className={classes.root}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <Pagination count={size} currentPage={setCurrentOffset} offset={offset} />\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            <TableCell></TableCell>\r\n                            <TableCell>\r\n                                <Filters dateEmitter={dateFilterEmitter} pincodeEmitter={pincodeFilterEmitter} />\r\n                            </TableCell>\r\n                            <TableCell></TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>Order Id</TableCell>\r\n                            <TableCell>Customer Id</TableCell>\r\n                            <TableCell>Delivery Pincode</TableCell>\r\n                            <TableCell>Order Date</TableCell>\r\n                            <TableCell>Items</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {displayedOrders.length > 0 ?\r\n\r\n                            displayedOrders.map((order: any) => {\r\n                                const items = order.items.split(';')\r\n                                return <TableRow key={order.orderId}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {order.orderId}\r\n                                    </TableCell>\r\n                                    <TableCell>{order.customerId}</TableCell>\r\n                                    <TableCell>{order.deliveryPincode}</TableCell>\r\n                                    <TableCell>{order.orderDate}</TableCell>\r\n                                    <TableCell align='justify'>{items.map((dun: string, i: number) => <div key={i}>{dun.split(':').join(\" - \")}</div>)}</TableCell>\r\n                                </TableRow>\r\n                            })\r\n                            : 'No matches to display'}\r\n\r\n                    </TableBody>\r\n                    <TableFooter>\r\n\r\n                    </TableFooter>\r\n                </Table>\r\n            </Paper>\r\n        </div>\r\n    )\r\n};\r\nexport default DisplayTable;\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport DisplayTable from './order-components/DisplayTables';\n\nconst App: React.FC = () => {\n\n\n  return (\n    <div className=\"App\">\n      <DisplayTable limit={20}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}